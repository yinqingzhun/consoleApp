using InterfaceProjectForTest;
using InterfaceProjectForTest.Fakes;
using Microsoft.VisualStudio.TestTools.UnitTesting;

namespace UnitTestProject
{
    [TestClass]
    public class TestStockAnalyzer
    {
        [TestMethod]
        public void TestGetValueGeneric()
        {
            var stub = new StubIStockFeed();
            IStockFeed istub = stub;
            stub.GetValueOf1(() => 1.5);
            istub = stub;
            Assert.AreEqual(1.5, istub.GetValue<double>());
        }
        [TestMethod]
        public void TestGetSharePriceString()
        {
            // Arrange:
            int price = 100;
            // Create the fake stockFeed:
            IStockFeed stockFeed =
                 new StubIStockFeed() // Generated by Fakes.
                 {
                     // Define each method:
                     // Name is original name + parameter types:
                     GetSharePriceString = (company) => { return price; }
                 };

            // In the completed application, stockFeed would be a real one:
            var componentUnderTest = new StockAnalyzer(stockFeed);
            // Act:
            int actualValue = componentUnderTest.GetContosoPrice();

            // Assert:
            Assert.AreEqual(price, actualValue);
        }
        [TestMethod]
        public void TestPriceUnitGetProperty()
        {
            var stub = new StubIStockFeed();
            
            string unit = "RMB";
            stub.PriceUnitGet = () => unit;
            stub.PriceUnitSetString = (v) => unit = v;

            IStockFeed istub = stub;
            istub.PriceUnit = "MSDR";
            Assert.AreEqual("MSDR", istub.PriceUnit);
        }
        [TestMethod]
        public void TestEvent()
        {
            
            var stub = new StubIStockFeed();

            stub.ChangedEvent(stub, System.EventArgs.Empty);

        }

    }
}